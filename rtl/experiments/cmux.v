/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


// special multiplexor that also handles change in PH,PL with interrupt level
module cmux (
  input [3:0] in3, // the selection is extracted from this input
  input [3:0] in2,
  input [3:0] in1,
  input [3:0] in0,
  input curInt, // current Interrupt level
  output [3:0] out,
  output sel0
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire [1:0] s7;
  wire [3:0] s8;
  assign s0 = in3[0];
  assign s1 = in3[1];
  assign s2 = in3[2];
  assign s3 = in3[3];
  assign s4 = (s2 | s3);
  assign s8[0] = s0;
  assign s8[1] = s2;
  assign s8[2] = (s2 ^ (s1 & s2 & s3 & curInt));
  assign s8[3] = s3;
  assign s5 = (s1 | s4);
  assign s6 = (s0 | s4);
  assign s7[0] = s6;
  assign s7[1] = s5;
  assign sel0 = ~ (s6 | s5);
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i0 (
    .sel( s7 ),
    .in_0( in0 ),
    .in_1( in1 ),
    .in_2( in2 ),
    .in_3( s8 ),
    .out( out )
  );
endmodule
