/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule

module DIG_BlockRAMDualPort
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
  input [(AddrBits-1):0] A,
  input [(Bits-1):0] Din,
  input str,
  input C,
  output [(Bits-1):0] D
);
  reg [(Bits-1):0] memory[0:((1 << AddrBits) - 1)];
  reg [(Bits-1):0] wData;

  assign D = wData;

  always @ (posedge C) begin
    wData <= memory[A];
    if (str)
      memory[A] <= Din;
  end
endmodule


module bram_test (
  input clk,
  input write,
  input toggleAddr,
  output [1:0] dOut,
  output [1:0] dIn,
  output memClk,
  output [1:0] addr
);
  wire [4:0] s0;
  wire [1:0] dIn_temp;
  wire memClk_temp;
  wire [1:0] s1;
  wire [1:0] addr_temp;
  DIG_Counter_Nbit #(
    .Bits(5)
  )
  DIG_Counter_Nbit_i0 (
    .en( 1'b1 ),
    .C( clk ),
    .clr( 1'b0 ),
    .out( s0 )
  );
  assign s1[0] = toggleAddr;
  assign s1[1] = toggleAddr;
  assign memClk_temp = ~ s0[2];
  assign dIn_temp = s0[4:3];
  assign addr_temp = (dIn_temp ^ (s0[1:0] & s1));
  DIG_BlockRAMDualPort #(
    .Bits(2),
    .AddrBits(2)
  )
  DIG_BlockRAMDualPort_i1 (
    .A( addr_temp ),
    .Din( dIn_temp ),
    .str( write ),
    .C( memClk_temp ),
    .D( dOut )
  );
  assign dIn = dIn_temp;
  assign memClk = memClk_temp;
  assign addr = addr_temp;
endmodule
