/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


// This simple circuit can do all the operations needed to execute Baby8 instructions
module baby8_logic (
  input [1:0] logSel, // select logical operation between A and B or just use B
  input [7:0] A,
  input [7:0] B,
  output [7:0] R // result of the addition

);
  wire [7:0] s0;
  wire [7:0] s1;
  wire [7:0] s2;
  assign s0 = (A & B);
  assign s1 = (A | B);
  assign s2 = (A ^ B);
  Mux_4x1_NBits #(
    .Bits(8)
  )
  Mux_4x1_NBits_i0 (
    .sel( logSel ),
    .in_0( s0 ),
    .in_1( s1 ),
    .in_2( s2 ),
    .in_3( B ),
    .out( R )
  );
endmodule
