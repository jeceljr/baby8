/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule

module DIG_RegisterFile
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input [(Bits-1):0] Din,
    input we,
    input [(AddrBits-1):0] Rw,
    input C,
    input [(AddrBits-1):0] Ra,
    input [(AddrBits-1):0] Rb,
    output [(Bits-1):0] Da,
    output [(Bits-1):0] Db
);

    reg [(Bits-1):0] memory[0:((1 << AddrBits)-1)];

    assign Da = memory[Ra];
    assign Db = memory[Rb];

    always @ (posedge C) begin
        if (we)
            memory[Rw] <= Din;
    end
endmodule


module register_test (
  input write,
  input toggleAddr,
  input clk,
  output [1:0] outB,
  output [1:0] outA,
  output memClk,
  output [1:0] rB,
  output [1:0] rA
);
  wire [1:0] rA_temp;
  wire memClk_temp;
  wire [1:0] rB_temp;
  wire [4:0] s0;
  wire [1:0] s1;
  DIG_Counter_Nbit #(
    .Bits(5)
  )
  DIG_Counter_Nbit_i0 (
    .en( 1'b1 ),
    .C( clk ),
    .clr( 1'b0 ),
    .out( s0 )
  );
  assign s1[0] = toggleAddr;
  assign s1[1] = toggleAddr;
  assign memClk_temp = ~ s0[2];
  assign rA_temp = s0[4:3];
  assign rB_temp = (rA_temp ^ (s0[1:0] & s1));
  DIG_RegisterFile #(
    .Bits(2),
    .AddrBits(2)
  )
  DIG_RegisterFile_i1 (
    .Din( rA_temp ),
    .we( write ),
    .Rw( rA_temp ),
    .C( memClk_temp ),
    .Ra( rA_temp ),
    .Rb( rB_temp ),
    .Da( outA ),
    .Db( outB )
  );
  assign memClk = memClk_temp;
  assign rB = rB_temp;
  assign rA = rA_temp;
endmodule
