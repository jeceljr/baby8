/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



// generates the flags based on the result and the signs of the operands
module flags (
  input [7:0] R, // output of the adder
  input [7:0] A, // operando for the adder
  input [7:0] B, // other operand for the adder
  output Z, // addition had zero result
  output N, // addition had negative result
  output V // addition overflowed

);
  wire N_temp;
  assign Z = ~ (R[0] | R[1] | R[2] | R[3] | R[4] | R[5] | R[6] | R[7]);
  assign N_temp = R[7];
  assign V = ((N_temp & ~ B[7] & ~ A[7]) | (~ N_temp & B[7] & A[7]));
  assign N = N_temp;
endmodule

// This simple circuit can do all the operations needed to execute Baby8 instructions
module baby8_alu (
  input [1:0] logSel, // select logical operation between A and B or just use B
  input [1:0] aSel, // select A, inverted A or a constant to be added
  input Cin, // carry in
  input [7:0] A, // second operand (order only matters for subtraction)
  input [7:0] B, // first operand
  output [7:0] R, // result of the addition
  output C, // carry out
  output Z, // indicates that the result is zero
  output N, // indicates that the result is negative
  output V // indicates an overflow, where the sign
           // of the result is different from the signs
           // of the operands

);
  wire [7:0] s0;
  wire [7:0] s1;
  wire [7:0] R_temp;
  wire [7:0] s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  assign s3 = (A & B);
  assign s4 = (A | B);
  assign s5 = (A ^ B);
  assign s2 = ~ A;
  Mux_4x1_NBits #(
    .Bits(8)
  )
  Mux_4x1_NBits_i0 (
    .sel( aSel ),
    .in_0( A ),
    .in_1( s2 ),
    .in_2( 8'b0 ),
    .in_3( 8'b11111110 ),
    .out( s0 )
  );
  Mux_4x1_NBits #(
    .Bits(8)
  )
  Mux_4x1_NBits_i1 (
    .sel( logSel ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( B ),
    .out( s1 )
  );
  DIG_Add #(
    .Bits(8)
  )
  DIG_Add_i2 (
    .a( s0 ),
    .b( s1 ),
    .c_i( Cin ),
    .s( R_temp ),
    .c_o( C )
  );
  flags flags_i3 (
    .R( R_temp ),
    .A( s0 ),
    .B( s1 ),
    .Z( Z ),
    .N( N ),
    .V( V )
  );
  assign R = R_temp;
endmodule
